// ---------------------------------------------------------
//   ATMEL Microcontroller Software Support  -  ROUSSET  -
// ---------------------------------------------------------
// The software is delivered "AS IS" without warranty or
// condition of any  kind, either express, implied or
// statutory. This includes without limitation any warranty
// or condition with respect to merchantability or fitness
// for any particular purpose, or against the infringements of
// intellectual property rights of others.
// ---------------------------------------------------------
//  File: SAM9_SDRAM.mac
//  User setup file for CSPY debugger.
//  1.1 08/Aug/06 jpp    : Creation
//
//  $Revision: 1.1.2.1 $
//
// ---------------------------------------------------------
__var __mac_i;
__var __mac_pt;

/*********************************************************************
*
*       execUserReset() : JTAG set initially to Full Speed
*/
execUserReset()
{
    __message "------------------------------ execUserReset ---------------------------------";
    _MapRAMAt0();                       //* Set the RAM memory at 0x00300000 & 0x00000000
    __PllSetting();                     //* Init PLL
    __message "-------------------------------Set PC Reset ----------------------------------";
}

/*********************************************************************
*
*       execUserPreload() : JTAG set initially to 32kHz
*/
execUserPreload()
{
    __message "------------------------------ execUserPreload ---------------------------------";
    __hwReset(0);                     //* Hardware Reset: CPU is automatically halted after the reset (JTAG is already configured to 32kHz)
    __writeMemory32(0xD3,0x98,"Register"); //*  Set CPSR
    __PllSetting();                   //* Init PLL
    __initDDRAM();                    //* Init SDRAM before load          
    _MapRAMAt0();                     //* Set the RAM memory at 0x0020 0000 & 0x0000 0000
    _InitRSTC();                      //* Enable User Reset to allow execUserReset() execution
}



/*********************************************************************
*
*       _InitRSTC()
*
* Function description
*   Initializes the RSTC (Reset controller).
*   This makes sense since the default is to not allow user resets, which makes it impossible to
*   apply a second RESET via J-Link
*/
_InitRSTC() {
    __writeMemory32(0xA5000001, 0xFFFFFD08,"Memory");    // Allow user reset
}


/*********************************************************************
*
*       __initDDRAM()
* Function description
* Configuring the MICRON DDRAM controller
*/
__initDDRAM()
{
     __var tempVal;
    __message "-------------------------------Configuring the DDRAM controller------------\n";
    __message "-------------------------------MICRON DDRAM configuration------------------\n";
    // 0xFFFFE600 DDR2C Base Address

    // Enable DDR2 clock x2 in PMC
    // AT91C_BASE_PMC, PMC_SCER, AT91C_PMC_DDR
    
    __writeMemory32(0x04,0xFFFFFC00,"Memory");    
   
    // Configure the DDR controller
    // HDDRSDRC2_MDR, AT91C_DDRC2_DBW_16_BITS   |     // 16-bit DDR
    // AT91C_DDRC2_MD_DDR2_SDRAM       // DDR2
    
    __writeMemory32(0x16,0xFFFFE620,"Memory");

    // Program the DDR Controller
    // HDDRSDRC2_CR, AT91C_DDRC2_NC_DDR10_SDR9  |     // 10 column bits (1K)
    //          AT91C_DDRC2_NR_14          |     // 14 row bits    (8K)
    //          AT91C_DDRC2_CAS_3          |     // CAS Latency 3
    //          AT91C_DDRC2_DLL_RESET_DISABLED   // DLL not reset
    
    __writeMemory32(0x3D,0xFFFFE608,"Memory");
    
    // assume timings for 7.5ns min clock period
    // HDDRSDRC2_T0PR, AT91C_DDRC2_TRAS_6       |     //  6 * 7.5 = 45   ns
    //            AT91C_DDRC2_TRCD_2       |     //  3 * 7.5 = 22.5 ns
    //            AT91C_DDRC2_TWR_2        |     //  2 * 7.5 = 15   ns
    //            AT91C_DDRC2_TRC_8        |     // 10 * 7.5 = 75   ns
    //            AT91C_DDRC2_TRP_2        |     //  3 * 7.5 = 22.5 ns
    //            AT91C_DDRC2_TRRD_1       |     //  2 * 7.5 = 15   ns
    //            AT91C_DDRC2_TWTR_1       |     //  1 clock cycle
    //            AT91C_DDRC2_TMRD_2             //  2 clock cycles
    
    __writeMemory32(0x21128226,0xFFFFE60C,"Memory");

    // pSDDRC->HDDRSDRC2_T1PR = 0x00000008;
    // HDDRSDRC2_T1PR, AT91C_DDRC2_TXP_2  |           //  2 * 7.5 = 15 ns
    //                 200 << 16          |           // 200 clock cycles, TXSRD: Exit self refresh delay to Read command
    //                 27 << 8            |           // 27 * 7.5 = 202 ns TXSNR: Exit self refresh delay to non read command
    //                 AT91C_DDRC2_TRFC_14 << 0       // 19 * 7.5 = 142 ns (must be 140 ns for 1Gb DDR)

    __writeMemory32(0x02C81B0E,0xFFFFE610,"Memory");

    // HDDRSDRC2_T2PR, AT91C_DDRC2_TRTP_2   |         //  2 * 7.5 = 15 ns
    //                 AT91C_DDRC2_TRPA_2   |         //  2 * 7.5 = 15 ns
    //                 AT91C_DDRC2_TXARDS_7 |         //  7 clock cycles
    //                 AT91C_DDRC2_TXARD_7            //  2 clock cycles

    __writeMemory32(0x02020707,0xFFFFE614,"Memory");
    
    // Initialization Step 1 + 2: NOP command -> allow to enable clk
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_NOP_CMD  
    

    __writeMemory32(0x1,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x70000000,"Memory");
         
    //  Initialization Step 3 (must wait 200 us) (6 core cycles per iteration, core is at 396MHz: min 13200 loops)
    __sleep(200);

    // NOP command -> allow to enable cke
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_NOP_CMD  

    __writeMemory32(0x1,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x70000000,"Memory");
            
    // wait 400 ns min
    __sleep(1);
    
    // Initialization Step 4: Set All Bank Precharge
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD  
    __writeMemory32(0x2,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x70000000,"Memory");
    
    // wait 400 ns min
    __sleep(1);

    // Initialization Step 5: Set EMR operation (EMRS2)
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD  
    
    __writeMemory32(0x5,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x70000000,"Memory");
    
    // wait 2 cycles min
    __sleep(1);
    
    // Initialization Step 6: Set EMR operation (EMRS3)
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    
    __writeMemory32(0x5,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x76000000,"Memory");
    
    // wait 2 cycles min
    __sleep(1);
    
    // Initialization Step 7: Set EMR operation (EMRS1)
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD  

    __writeMemory32(0x5,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x72000000,"Memory");
    
    // wait 2 cycles min
    __sleep(1);


    // Initialization Step 8a: enable DLL reset
    // HDDRSDRC2_CR, cr | AT91C_DDRC2_DLL_RESET_ENABLED
    
    tempVal = __readMemory32(0xFFFFE608,"Memory");
    tempVal |= 0xBD;
    __writeMemory32(0xBD,0xFFFFE608,"Memory");
    
    // Initialization Step 8b: reset DLL
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_EXT_LMR_CMD
    
    __writeMemory32(0x5,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x70000000,"Memory");
    
    // wait 2 cycles min
    __sleep(1);
    

    // Initialization Step 9: Set All Bank Precharge
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_PRCGALL_CMD
    
    __writeMemory32(0x2,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x70000000,"Memory");
    
    // wait 2 cycles min
    __sleep(1);

    // Initialization Step 11: Set 1st CBR
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_RFSH_CMD
    
    __writeMemory32(0x4,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x70000000,"Memory");
    
    // wait 2 cycles min
    __sleep(1);
    
    // Set 2nd CBR
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_RFSH_CMD
    
    __writeMemory32(0x4,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x70000000,"Memory");
    
    // wait 2 cycles min
    __sleep(1);
    
    // Initialization Step 12: disable DLL reset
    // HDDRSDRC2_CR, cr & (~AT91C_DDRC2_DLL_RESET_ENABLED)  
    
    __writeMemory32(0x3D,0xFFFFE608,"Memory");
    // wait 2 cycles min
    __sleep(1);
    
    // Initialization Step 13: Set LMR operation
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_LMR_CMD
    
    __writeMemory32(0x3,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x70000000,"Memory");
    // wait 2 cycles min
    __sleep(1);
    
         
    // Skip Initialization Step 14 to 17 (not supported by the DDR2 model)

    // Initialization Step 18: Set Normal mode
    // HDDRSDRC2_MR, AT91C_DDRC2_MODE_NORMAL_CMD
    
    __writeMemory32(0x0,0xFFFFE600,"Memory");
    __writeMemory32(0x0,0x70000000,"Memory");
    // wait 2 cycles min
    __sleep(1);
    
    
    // Set Refresh timer
    // HDDRSDRC2_RTR, 0x00000520
    __writeMemory32(0x00000520,0xFFFFE604,"Memory");
    
    // OK now we are ready to work on the DDRSDR

    // wait for end of calibration
    __sleep(5);

   __message "------------------------------- DDRAM configuration done -------------------------------";

}

/*********************************************************************
*
*       _MapRAMAt0()
* Function description
* Remap RAM at 0
*/
_MapRAMAt0()
{
  __var hold;
  // ******************************************************
  // Test and set Remap
  // ******************************************************
  hold = __readMemory32(0x00000000,"Memory");
  __writeMemory32(0xAAAAAAAA,0x00000000,"Memory");
  if(__readMemory32(0x00000000,"Memory") != 0xAAAAAAAA)
  {
    __writeMemory32(0x03,0xFFFFEE00,"Memory");    // toggle remap bits
  }
  else
  {
    __writeMemory32(hold,0x00000000,"Memory");
  }
}


/*********************************************************************
*
*       __PllSetting()
* Function description
*   Initializes the PMC.
*   1. Enable the Main Oscillator
*   2. Configure PLL
*   3. Switch Master
*/
__PllSetting()
{
    //* pPmc->PMC_MOR = (( AT91C_CKGR_OSCOUNT & (0x40 <<8) | AT91C_CKGR_MOSCEN ));
    __writeMemory32(0x00004001,0xFFFFFC20,"Memory");
    __sleep(10000);

//*   AT91C_BASE_CKGR->CKGR_PLLAR = (AT91C_CKGR_SRCA | ((96 << 16) & AT91C_CKGR_MULA) | 
//    (AT91C_CKGR_PLLACOUNT | (AT91C_CKGR_OUTA_0 | (9);
    __writeMemory32(0x20C73F03,0xFFFFFC28,"Memory");
    __sleep(10000);
    
         
// AT91C_BASE_PMC->PMC_PLLBR = BOARD_USBDIV| BOARD_CKGR_PLLB | BOARD_PLLBCOUNT | BOARD_MULB| BOARD_DIVB;
    __writeMemory32(0x207C3F0C,0xFFFFFC2C,"Memory");
   __sleep(10000);
//*   AT91C_BASE_PMC->PMC_MCKR =  AT91C_PMC_CSS_PLLA_CLK | AT91C_PMC_PRES_CLK | AT91C_PMC_MDIV_2;;
    __writeMemory32(0x00001300,0xFFFFFC30,"Memory");
     __sleep(10000);
}



